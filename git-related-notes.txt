
 commands:  
 
 Here we are working with only two branches. Master and mango. 
 
$ git branch: shows you the brances that are present. (*- star against the name suggest the current branch you are working on). (Whenever you need to check what branch you are currently working on. use this command). 
 
$ git branch mango: this only creates a new branch and not to be confused with *git checkout mango.*  
 
$ git checkout mango: use this to enter/switch into the new branch stream that you have created or one that is already present.  
when ever you want to push your work, push it to the new branch i.e  *$ git push origin mango*.  

to delete a branch: 
`git branch -d branch_name`.

 

 *************************
To merge two branches: 
Remember to always git add, commit on the branch you are in before you checkout.  
 1) $ git checkout master: here we switch to the branch you want to merge with.  
 
2) $ git merge mango: After exiting the mango branch and into the master branch, we merge the files present in mango branch to the master. 
 
Once done, you can continue working on the master branch. Do $ git push origin master and continue working on master branch.  
 
note: if you want to delete the mango branch after this, you can do so with the command: 
$ git branch -d mango 
 

*************************

Merge conflicts: 
Merge conflicts appear on the same file when content doesn't match on each file while trying to merge two branches. (A file hello.html on the master branch and file hello.html on the mango branch are being changed by two different users. When thry try to merge their branches, it will show a merge conflict saying there are changes on the same file and it can not be merged unless resolved). to solve this use: 
 
$ git mergetool --tool=emerge  :this will open up the terminal and show three files. Top two are the files that have been changed and the bottom file is the editor. On the bottom file press N. This will highlight the change in ^^^^^. To keep change that is present on the left file: press B or to to keep the change on the right file press A. Press N to move to the next change. Once over press Q followed by y or no?  



**********************************

How to fork a repo?
1) fork a repo on github, here you will be asked for permission whether you want it be forked in your repo or some other group repos.Choose where you want to be forked.

2) once forked, the forked repo will appear in your github repositries. Now clone the repo: 
`git clone https://github.com/deksr/Spoon-Knife.git`

3) Then cd into the cloned repositry.
4) inside this repository, check by typinf this command '$ git remote -v' and it show 2 origins one for fetch and another for push like this:
origin	https://github.com/deksr/Spoon-Knife.git (fetch)
origin	https://github.com/deksr/Spoon-Knife.git (push)

5) Then add the remote origin: 
$ git remote add upstream https://github.com/octocat/Spoon-Knife.git

6) next, add the upstream using the command `$ git fetch upstream`

7) now when you check 'git remote -v' it will show 2 origins and 2 upstreams. 

8) Make changes to the file and the git add .,  git commit, git push origin master.

what is gitignore?
*****************

Gitignore will ignores files that shouldn't be commited in the github repo.

To gitignore a file: 
1) First create a `touch .gitignore`. 

2) note that this .gitignore file needs to be created at the very begining of the project. It will not ignore files that are already `git add`.

3) then include files that needs to be ignored. For example if the file name is index.html then add *index.html. 

4) Then git add git commit. 











